# -*- coding: utf-8 -*-
"""EX_POLINOMIAL_APP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FDHoOsFjyZeT5uqpblVcnYhZcdAsHlYk
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def main():
    st.set_page_config(page_title="Ajuste de Polinômio Cúbico com MMQ", layout="centered")

    st.title("Polinômio Cúbico por Mínimos Quadrados (MMQ)")
    st.markdown("""
    Esta aplicação demonstra o ajuste de um polinômio cúbico
    ($AX^3 + BX^2 + CX + D$) aos pontos fornecidos, utilizando o
    Método dos Mínimos Quadrados (MMQ).
    """)

    st.header("Pontos Fornecidos")
    st.markdown("""
    Os pontos utilizados para o ajuste são:
    * **Ponto 1:** $(-1, -10)$
    * **Ponto 2:** $(0, 5)$
    * **Ponto 3:** $(1, 6)$
    * **Ponto 4:** $(2, 11)$
    * **Ponto 5:** $(3, 42)$
    """)

    # 1. Preparação dos Dados
    x_pontos = np.array([-1, 0, 1, 2, 3])
    y_pontos = np.array([-10, 5, 6, 11, 42])

    st.subheader("Dados em Array NumPy:")
    st.write(f"**Valores de X:** {x_pontos}")
    st.write(f"**Valores de Y:** {y_pontos}")

    st.header("Cálculo dos Coeficientes")

    # 2. Construção da Matriz de Design (Matriz X)
    X = np.vstack([x_pontos**3, x_pontos**2, x_pontos**1, np.ones(len(x_pontos))]).T

    st.subheader("Matriz de Design (X):")
    st.dataframe(X) # st.dataframe exibe DataFrames ou arrays de forma elegante

    # 3. Cálculo dos Coeficientes (A, B, C, D) usando Mínimos Quadrados
    try:
        X_transposto_X = X.T @ X
        X_transposto_X_inv = np.linalg.inv(X_transposto_X)
        X_transposto_y = X.T @ y_pontos
        coeficientes = X_transposto_X_inv @ X_transposto_y

        A, B, C, D = coeficientes

        st.subheader("Coeficientes do Polinômio Cúbico:")
        st.write(f"**A (coeficiente de $x^3$):** `{A:.4f}`")
        st.write(f"**B (coeficiente de $x^2$):** `{B:.4f}`")
        st.write(f"**C (coeficiente de $x$):** `{C:.4f}`")
        st.write(f"**D (coeficiente constante):** `{D:.4f}`")

        st.markdown(f"""
        Portanto, o polinômio cúbico ajustado é:
        $$ Y = {A:.4f}X^3 + {B:.4f}X^2 + {C:.4f}X + {D:.4f} $$
        """)

        # 4. Geração dos Pontos do Polinômio para Plotagem
        x_plot = np.linspace(min(x_pontos) - 0.5, max(x_pontos) + 0.5, 100)
        y_polinomio = A * x_plot**3 + B * x_plot**2 + C * x_plot + D

        st.header("Visualização do Ajuste")

        # Configura o estilo do Seaborn para um visual mais agradável
        sns.set_theme(style="whitegrid")

        fig, ax = plt.subplots(figsize=(10, 6)) # Cria uma figura e um eixo para o Matplotlib

        # Plota os pontos originais com Seaborn
        sns.scatterplot(x=x_pontos, y=y_pontos, s=200, color='red', label='Pontos Originais', zorder=5, ax=ax)

        # Plota o polinômio cúbico ajustado
        sns.lineplot(x=x_plot, y=y_polinomio, color='blue', linewidth=2.5, label=f'Polinômio: {A:.2f}x³ + {B:.2f}x² + {C:.2f}x + {D:.2f}', ax=ax)

        ax.set_title('Ajuste de Polinômio Cúbico (Mínimos Quadrados)', fontsize=16)
        ax.set_xlabel('Eixo X', fontsize=12)
        ax.set_ylabel('Eixo Y', fontsize=12)
        ax.legend(fontsize=10)
        ax.axhline(0, color='gray', linewidth=0.5)
        ax.axvline(0, color='gray', linewidth=0.5)

        st.pyplot(fig) # Exibe o gráfico no Streamlit

    except np.linalg.LinAlgError:
        st.error("Erro: Não foi possível calcular a inversa da matriz (X.T @ X). Isso pode acontecer se a matriz for singular, o que significa que não há uma solução única para o problema.")
    except Exception as e:
        st.error(f"Ocorreu um erro: {e}")

if __name__ == "__main__":
    main()

